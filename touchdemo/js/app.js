// Generated by CoffeeScript 1.5.0
var SaveFile, ThreeRing, confirmAction;

$(function() {
  var threeRing;
  $("[data-toggle='tooltip']").tooltip();
  threeRing = new ThreeRing("drawContainer");
  threeRing.initDraw();
});

confirmAction = function(title, content, callback, confirmText, dismissText) {
  if (confirmText == null) {
    confirmText = "Confirm";
  }
  if (dismissText == null) {
    dismissText = "Close";
  }
  $("#confirmModal .modal-title").text(title);
  $("#confirmModal .modal-body").html($('<p/>').html(content));
  $("#confirmModal .modal-confirm").text(confirmText);
  $("#confirmModal .modal-dismiss").text(dismissText);
  $("#confirmModal .modal-confirm").on('click', function(event) {
    $("#confirmModal .modal-confirm").unbind('click');
    $("#confirmModal .modal-dismiss").unbind('hide.bs.modal');
    $("#confirmModal").modal('hide');
    callback(true, event);
  });
  $("#confirmModal").on('hide.bs.modal', function() {
    $("#confirmModal .modal-confirm").unbind('click');
    $("#confirmModal .modal-dismiss").unbind('hide.bs.modal');
    callback(false, event);
  });
  $("#confirmModal").modal('show');
};

ThreeRing = (function() {

  function ThreeRing(canvasContainer) {
    var _this = this;
    this.canvasContainer = canvasContainer;
    $("#drawContainer").append("<canvas id='drawCanvas' />");
    this.canvas = new fabric.Canvas('drawCanvas');
    if (this.canvas.width < $(window).width()) {
      this.canvas.setWidth($(window).width());
    }
    if (this.canvas.height < $(window).height()) {
      this.canvas.setHeight($(window).height());
    }
    $(window).on('resize', function() {
      if (_this.canvas.width < $(window).width()) {
        _this.canvas.setWidth($(window).width());
      }
      if (_this.canvas.height < $(window).height()) {
        _this.canvas.setHeight($(window).height());
      }
    });
    this.saves = new Array();
    this.currentSave = -1;
    if (localStorage['threering_notes'] != null) {
      this.saves = JSON.parse(localStorage['threering_notes']);
    }
    this.attachButtons();
  }

  ThreeRing.prototype.initDraw = function() {
    this.canvas.freeDrawingBrush.color = 'black';
    this.canvas.freeDrawingBrush.width = 5;
  };

  ThreeRing.prototype.attachButtons = function() {
    var _this = this;
    $("#btnTurnOffDraw, #btnTurnOnMove").on('click', function() {
      _this.toggleDrawingMode();
      $(event.currentTarget).blur();
    });
    $("#btnRemoveSelectedItem").on('click', function() {
      if ($(event.currentTarget).attr('disabled') != null) {
        return;
      }
      _this.delectSelectedItems();
      $(event.currentTarget).blur();
    });
    $(window).on('keydown', function(event) {
      if (event.which === 46 || event.which === 8) {
        return !_this.delectSelectedItems();
      }
    });
    $("#btnSave").on('click', function() {
      _this.saveToLocalStorage();
      $(event.currentTarget).blur();
    });
    $("#btnOpenSave").on('click', function() {
      var i, save, _i, _len, _ref;
      $("#loadFileModal #modalLoadFileList option").each(function(event) {
        return $(this).remove();
      });
      _ref = _this.saves;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        save = _ref[i];
        $("#loadFileModal #modalLoadFileList").append($('<option />').val(i).text(save.name));
      }
      $("#loadFileModal").modal('show');
      $(event.currentTarget).blur();
    });
    $("#loadFileModal .modal-load").on('click', function() {
      if ($("#modalLoadFileList").val() != null) {
        _this.loadFromLocalStorage($("#modalLoadFileList").val());
      } else {
        _this.loadloadFromLocalStorage();
      }
      return $("#loadFileModal").modal('hide');
    });
    $("#btnDeleteSave").on('click', function() {
      confirmAction("Delete save", "Are you sure you want to delete your current save?", function(result) {
        if (result) {
          _this.deleteSave(_this.currentSave);
        }
      }, "Yes", "No");
      $(event.currentTarget).blur();
    });
    $("#btnClearCanvas").on('click', function() {
      confirmAction("Clear Canvas", "Are you sure you want to clear the canvas?", function(result) {
        if (result) {
          _this.canvas.clear();
        }
      }, "Yes", "No");
      $(event.currentTarget).blur();
    });
    this.canvas.on('object:selected', function() {
      $("#btnRemoveSelectedItem").removeAttr('disabled');
    });
    this.canvas.on('selection:created', function() {
      $("#btnRemoveSelectedItem").removeAttr('disabled');
    });
    this.canvas.on('selection:cleared', function() {
      $("#btnRemoveSelectedItem").attr('disabled', 'disabled');
    });
  };

  ThreeRing.prototype.loadFromLocalStorage = function(index) {
    var _this = this;
    if (index == null) {
      index = -1;
    }
    if (localStorage['threering_notes'] != null) {
      if (index === -1) {
        index = localStorage['threering_notes'].length - 1;
      }
      if (localStorage['threering_notes'][index] != null) {
        this.currentSave = index;
        $("#fileName").text(this.saves[this.currentSave].name);
        this.canvas.loadFromDatalessJSON(this.saves[index].saveData, function() {
          return _this.canvas.renderAll(true);
        });
        return true;
      }
    }
    return false;
  };

  ThreeRing.prototype.saveToLocalStorage = function() {
    if (!Modernizr.localstorage) {
      alert("You don't have local storage =[");
      return false;
    }
    if (this.saves == null) {
      this.saves = [];
    }
    if (this.currentSave === -1) {
      this.saves.push(new SaveFile((new Date()).toUTCString(), this.canvas.toDatalessJSON()));
      this.currentSave = this.saves.length - 1;
      $("#fileName").text(this.saves[this.currentSave].name);
    } else {
      if (this.saves[this.currentSave] != null) {
        this.saves[this.currentSave].saveData = this.canvas.toDatalessJSON();
      } else {
        this.saves.push(new SaveFile((new Date()).toUTCString(), this.canvas.toDatalessJSON()));
        this.currentSave = this.saves.length - 1;
        $("#fileName").text(this.saves[this.currentSave].name);
      }
    }
    localStorage['threering_notes'] = JSON.stringify(this.saves);
    return true;
  };

  ThreeRing.prototype.delectSelectedItems = function() {
    var activeGroup, activeObj, obj, _i, _len, _ref;
    activeObj = this.canvas.getActiveObject();
    activeGroup = this.canvas.getActiveGroup();
    $("#btnRemoveSelectedItem").attr('disabled', 'disabled');
    if (activeGroup) {
      _ref = activeGroup.getObjects();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        this.canvas.remove(obj);
      }
      this.canvas.discardActiveGroup();
      return true;
    } else if (activeObj) {
      this.canvas.remove(activeObj);
      return true;
    }
    return false;
  };

  ThreeRing.prototype.deleteSave = function(index) {
    if (index == null) {
      index = -1;
    }
    if (index === -1) {
      this.saves = [];
    } else {
      if (this.saves[index] != null) {
        this.saves.splice(index, 1);
      }
    }
    localStorage['threering_notes'] = JSON.stringify(this.saves);
    this.currentSave = -1;
    return this.newFile();
  };

  ThreeRing.prototype.newFile = function() {
    $("#fileName").text("New File");
    this.canvas.clear();
    return this.currentSave = -1;
  };

  ThreeRing.prototype.toggleDrawingMode = function() {
    this.canvas.isDrawingMode = !this.canvas.isDrawingMode;
    if (this.canvas.isDrawingMode) {
      $("#btnTurnOffDraw").addClass('active');
      $("#btnTurnOnMove").removeClass('active');
    } else {
      $("#btnTurnOffDraw").removeClass('active');
      $("#btnTurnOnMove").addClass('active');
    }
  };

  return ThreeRing;

})();

SaveFile = (function() {

  function SaveFile(name, saveData) {
    this.name = name;
    this.saveData = saveData;
  }

  SaveFile.prototype.name = null;

  SaveFile.prototype.saveData = null;

  return SaveFile;

})();
